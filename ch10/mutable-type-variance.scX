class CSuper                { def msuper() = println("CSuper") }
class C      extends CSuper { def m()      = println("C") }
class CSub   extends C      { def msub()   = println("CSub") }

class ContainerPlus[+A](var value: A)
class ContainerMinus[-A](var value: A)

class ContainerPlus[+A](var a: A) {
  private var _value: A = a
  def value_=(newA: A): Unit = _value = newA
  def value: A = _value
}

val cp = new ContainerPlus(new C)
cp.value = new C
cp.value = new CSub
cp.value = new CSuper


val cp: ContainerPlus[C] = new ContainerPlus(new CSub)
cp.value = new C
cp.value = new CSub
cp.value = new CSuper


class ContainerMinus[-A](var a: A) {
  private var _value: A = a
  def value_=(newA: A): Unit = _value = newA
  def value: A = _value
}

val cm: ContainerMinus[C] = new ContainerMinus(new CSuper)
val c: C      = cm.value
val c: CSuper = cm.value
val c: CSub   = cm.value
